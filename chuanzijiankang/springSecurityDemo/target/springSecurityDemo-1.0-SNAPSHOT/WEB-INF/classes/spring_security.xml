<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc.xsd
						http://code.alibabatech.com/schema/dubbo
						http://code.alibabatech.com/schema/dubbo/dubbo.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
                          http://www.springframework.org/schema/security
                          http://www.springframework.org/schema/security/spring-security.xsd">
   <!--开启spring注解使用-->
    <context:annotation-config></context:annotation-config>
    <!--注解方式权限控制-->
    <mvc:annotation-driven></mvc:annotation-driven>
    <context:component-scan base-package="com.itheima.controller"></context:component-scan>

    <security:global-method-security pre-post-annotations="enabled"></security:global-method-security>

    <!--配置那些资源匿名可以访问（不登录也可以访问）-->
    <!--<security:http security="none" pattern="/pages/a.html"></security:http>-->
    <!--<security:http security="none" pattern="/pages/b.html"></security:http>-->
        <!--<security:http security="none" pattern="/pages/**"></security:http>-->
        <!--可以用文件的方式区分那些可以访问，那些不可以访问-->

    <!--配置使用自己的登录页面-->
    <security:http security="none" pattern="/login.html"></security:http>

    <!--
        http：用于定义相关权限控制
        auto-config：是否自动配置
                        设置为true时框架会提供默认的一些配置，例如提供默认的登录页面、登出处理等
                        设置为false时需要显示提供登录表单配置，否则会报错
        use-expressions：用于指定intercept-url中的access属性是否使用表达式
    -->
    <security:http auto-config="true" use-expressions="true">
        <!--
            intercept-url：定义一个拦截规则
            pattern：对哪些url进行权限控制
            access：在请求对应的URL时需要什么权限，默认配置时它应该是一个以逗号分隔的角色列表，
				  请求的用户只需拥有其中的一个角色就能成功访问对应的URL
        -->
        <security:intercept-url pattern="/**"  access="hasRole('ROLE_ADMIN')" />

        <!--只要认证通过了就可以访问-->
        <security:intercept-url pattern="/pages/a.html" access="isAuthenticated()"></security:intercept-url>
        <!--拥有add权限就可以访问-->
        <security:intercept-url pattern="/pages/b.html" access="hasAuthority('add')"></security:intercept-url>
        <!--拥有role_admin / ROLE_就可以访问c.html-->
        <security:intercept-url pattern="index.html" access="hasRole('ROLE_ADMIN')"></security:intercept-url>



        <!--如果要使用自己指定的页面作为登录页面，必须配置表单,
                login-page:指定登录页面的url
                username-parameter="表单里的username名"
                password-parameter="同理"
                controller控制层，不用写，以前是直接发送到控制层由控制层处理，现在这个登录请求由该框架处理
                login-processing-url，告诉框架帮我们去做认证处理
                default-target-url,默认调转登录成功页面
                 authentication-failure-url//登录失败的url
        -->
        <security:form-login
                login-page="/login.html"
                username-parameter="username"
                password-parameter="password"
                login-processing-url="/login.do"
                default-target-url="/index.html"
                authentication-failure-url="/login.html"
                ></security:form-login>
        <!--
            csrf:对应CsrfFilter过滤器，如果想要指定自己的登录页面，那么就要关闭他这项功能，如果不关闭，他会默认该页面不安全
               没有使用自定义的话，那么他的有一个隐藏的_csrf，值，提交之后，框架提供的这个csrf过滤器，跟它内存保存的是不是一致的，如果一致，则判明这是本框架生成的，
               如果不一致，则这次请求可能是伪造的（就会报403错误），
        -->
        <security:csrf disabled="true"></security:csrf>

        <!--由框架帮助退出用户系统
            logout 退出请求操作对应的请求路径
            logout-success-url，退出成功登录后跳转的页面
         -->
        <security:logout logout-url="/logout.do" logout-success-url="/login.html" invalidate-session="true"></security:logout>
    </security:http>

    <!--
        authentication-manager：认证管理器，用于处理认证操作
    -->
    <security:authentication-manager>
        <!--
            authentication-provider：认证提供者，执行具体的认证逻辑
        -->
        <security:authentication-provider user-service-ref="userService" >
            <!--
                user-service：用于获取用户信息，提供给authentication-provider进行认证
            -->
            <!--<security:user-service>
                     user：定义用户信息，可以指定用户名、密码、角色，后期可以改为从数据库查询用户信息
                     {noop}：表示当前使用的密码为明文
                    <security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN"/>
                </security:user-service>
            -->
            <security:password-encoder ref="passwordEncoding"></security:password-encoder>
         </security:authentication-provider>
    </security:authentication-manager>

    <!--把继承的类，交给springsecurity管理-->
    <bean id="userService" class="com.itheima.service.SpringSecurityUserService"></bean>

    <!--配置加密对象-->
    <bean id="passwordEncoding" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>

</beans>